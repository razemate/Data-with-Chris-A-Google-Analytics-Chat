import pandas as pd
import io
from fpdf import FPDF
from docx import Document
import plotly.io as pio

def to_excel(df, fig=None):
    """Export DataFrame to Excel, optionally with chart as image (if fig provided)"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Analytics Report')
        if fig is not None:
            try:
                import openpyxl
                from openpyxl.drawing.image import Image as XLImage
                import tempfile
                img_bytes = pio.to_image(fig, format="png")
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_img:
                    tmp_img.write(img_bytes)
                    tmp_img.flush()
                    wb = writer.book
                    ws = writer.sheets['Analytics Report']
                    img = XLImage(tmp_img.name)
                    ws.add_image(img, 'E2')
            except Exception as e:
                pass  # Chart embedding is best effort
    return output.getvalue()

def to_pdf(df, fig=None, title="Analytics Report"):
    """Export DataFrame to PDF with optional chart image"""
    import tempfile
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, title, 0, 1, 'C')
    pdf.ln(5)
    img_path = None
    # Add chart if exists
    if fig is not None:
        try:
            img_bytes = pio.to_image(fig, format="png", engine="kaleido")
            img_path = "temp_chart.png"
            with open(img_path, "wb") as f:
                f.write(img_bytes)
            pdf.image(img_path, x=10, w=190)
            pdf.ln(5)
        except Exception as e:
            pass
    # Table
    pdf.set_font("Arial", size=12)
    col_width = pdf.w / (len(df.columns) + 1)
    row_height = pdf.font_size * 1.5
    pdf.set_fill_color(200, 220, 255)
    for col in df.columns:
        pdf.cell(col_width, row_height, str(col), border=1, fill=True)
    pdf.ln(row_height)
    pdf.set_fill_color(255, 255, 255)
    for _, row in df.iterrows():
        for col in df.columns:
            pdf.cell(col_width, row_height, str(row[col]), border=1)
        pdf.ln(row_height)
    pdf.ln(10)
    pdf.set_font_size(10)
    pdf.cell(0, 10, "Generated by GA4 Analytics Assistant", 0, 0, 'C')
    output = pdf.output(dest='S').encode('latin1')
    # Cleanup temp file
    import os
    if img_path and os.path.exists(img_path):
        os.remove(img_path)
    return output

def to_word(df, fig=None, title="Analytics Report"):
    """Export DataFrame to Word document with optional chart image"""
    import tempfile
    from docx.shared import Inches
    doc = Document()
    doc.add_heading(title, 0)
    img_path = None
    # Add chart if exists
    if fig is not None:
        try:
            img_bytes = pio.to_image(fig, format="png", engine="kaleido")
            img_path = "temp_chart.png"
            with open(img_path, "wb") as f:
                f.write(img_bytes)
            doc.add_picture(img_path, width=Inches(5.5))
        except Exception as e:
            pass
    # Add table
    table = doc.add_table(rows=1, cols=len(df.columns))
    table.style = 'Table Grid'
    # Header row
    hdr_cells = table.rows[0].cells
    for i, col in enumerate(df.columns):
        hdr_cells[i].text = str(col)
    # Data rows
    for _, row in df.iterrows():
        row_cells = table.add_row().cells
        for i, col in enumerate(df.columns):
            row_cells[i].text = str(row[col])
    # Footer
    doc.add_paragraph("Generated by GA4 Analytics Assistant")
    doc_stream = io.BytesIO()
    doc.save(doc_stream)
    # Cleanup
    import os
    if 'img_path' in locals() and img_path and os.path.exists(img_path):
        os.remove(img_path)
    return doc_stream.getvalue()
    doc.add_paragraph("Generated by GA4 Analytics Assistant")
    doc_stream = io.BytesIO()
    doc.save(doc_stream)
    return doc_stream.getvalue()
